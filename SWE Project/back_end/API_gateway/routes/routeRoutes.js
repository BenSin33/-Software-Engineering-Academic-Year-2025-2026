const express = require("express");
const { callService } = require("../services/callService.js");

const router = express.Router();

/**
 * üü¢ GET /routes
 * L·∫•y danh s√°ch tuy·∫øn v√† g·ªôp t√™n t√†i x·∫ø (fail-safe)
 */
router.get("/", async (req, res) => {
  try {
    // --- 1Ô∏è‚É£ L·∫•y danh s√°ch tuy·∫øn ---
    let routes = [];
    try {
      const routeResponse = await callService("route_service", "/Routes", "GET");
      routes = routeResponse.routes || routeResponse || [];
    } catch (err) {
      console.warn("‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu route_service:", err.message);
    }

    // --- 2Ô∏è‚É£ L·∫•y danh s√°ch t√†i x·∫ø ---
    let drivers = [];
    try {
      const driverResponse = await callService("driver_service", "/drivers", "GET");
      drivers = driverResponse.drivers || driverResponse || [];
    } catch (err) {
      console.warn("‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu driver_service:", err.message);
    }

    // --- 3Ô∏è‚É£ G·ªôp d·ªØ li·ªáu ---
    const mergedData = routes.map((route) => {
      const driver = drivers.find((d) => d.driverID === route.driverID);
      return {
        ...route,
        DriverName: driver ? driver.fullName : "Kh√¥ng c√≥ d·ªØ li·ªáu t√†i x·∫ø",
      };
    });
    return res.status(200).json({
      message: "L·∫•y d·ªØ li·ªáu th√†nh c√¥ng (c√≥ th·ªÉ thi·∫øu m·ªôt s·ªë d·ªØ li·ªáu n·∫øu service con l·ªói)",
      routes: mergedData,
    });
  } catch (err) {
    console.error("‚ùå L·ªói kh√¥ng mong mu·ªën:", err);
    return res.status(500).json({ message: "L·ªói server khi l·∫•y d·ªØ li·ªáu tuy·∫øn" });
  }
});

/**
 * ‚ûï POST /routes/add
 * Th√™m tuy·∫øn m·ªõi (fail-safe)
 */
router.post("/add", async (req, res) => {
  const { driverID, busID, routeName, startLocation, endLocation } = req.body;
  const formData = { driverID, busID, routeName, startLocation, endLocation };
  console.log('req.body: ',req.body)
  try {
    // --- G·ªçi route_service ---
    let response;
    try {
      response = await callService("route_service", "/Routes/add", "POST", formData);
    } catch (err) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m tuy·∫øn (route_service l·ªói):", err.message);
      return res.status(500).json({ message: "Kh√¥ng th·ªÉ th√™m tuy·∫øn ‚Äî l·ªói route_service" });
    }

    // --- L·∫•y t√™n t√†i x·∫ø (fail-safe) ---
    let DriverName = "Kh√¥ng c√≥ d·ªØ li·ªáu t√†i x·∫ø";
    try {
      const driverResponse = await callService("driver_service", `/drivers/${driverID}`, "GET");
      DriverName = driverResponse.fullName || DriverName;
    } catch (err) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y t√™n t√†i x·∫ø:", err.message);
    }

    return res.status(200).json({
      message: "Th√™m tuy·∫øn m·ªõi th√†nh c√¥ng",
      newRoute: { DriverID:driverID,BusID:busID,RouteID: response,RouteName:routeName,StartLocation: startLocation,EndLocation: endLocation, DriverName },
      response,
    });
  } catch (err) {
    console.error("‚ùå L·ªói kh√¥ng mong mu·ªën khi th√™m tuy·∫øn:", err);
    return res.status(500).json({ message: "L·ªói server khi th√™m tuy·∫øn m·ªõi" });
  }
});

/**
 * ‚úèÔ∏è POST /routes/edit/:id
 * C·∫≠p nh·∫≠t tuy·∫øn (fail-safe)
 */
router.post("/edit/:id", async (req, res) => {
  const { id } = req.params;
  const { driverID, busID, routeName, startLocation, endLocation } = req.body;
  const formData = { driverID, busID, routeName, startLocation, endLocation };

  try {
    let response;
    try {
      response = await callService("route_service", `/Routes/edit/${id}`, "POST", formData);
    } catch (err) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tuy·∫øn:", err.message);
      return res.status(500).json({ message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tuy·∫øn ‚Äî l·ªói route_service" });
    }

    let DriverName = "Kh√¥ng c√≥ d·ªØ li·ªáu t√†i x·∫ø";
    try {
      const driverResponse = await callService("driver_service", `/drivers/${driverID}`, "GET");
      DriverName = driverResponse.fullName || DriverName;
    } catch (err) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y t√™n t√†i x·∫ø:", err.message);
    }

    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t tuy·∫øn th√†nh c√¥ng",
      updatedRoute: { BusID:busID, RouteName:routeName, StartLocation:startLocation, EndLocation:endLocation,DriverID:driverID, DriverName,RouteID:id },
      response,
    });
  } catch (err) {
    console.error("‚ùå L·ªói kh√¥ng mong mu·ªën khi c·∫≠p nh·∫≠t tuy·∫øn:", err);
    return res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t tuy·∫øn" });
  }
});

/**
 * ‚ùå POST /routes/delete/:id
 * X√≥a tuy·∫øn (fail-safe)
 */
router.post("/delete/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const response = await callService("route_service", `/Routes/delete/${id}`, "POST");
    return res.status(200).json({
      message: "X√≥a tuy·∫øn th√†nh c√¥ng",
      response,
    });
  } catch (err) {
    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a tuy·∫øn:", err.message);
    return res.status(500).json({ message: "L·ªói server khi x√≥a tuy·∫øn" });
  }
});

module.exports = router;
